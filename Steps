#FOR THEORETICAL EXPLANATION 
(https://medium.com/@csarat424/roborevolution-crafting-an-automated-wonderland-with-stans-robot-shop-4204f0159369)

#install cli 
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"

unzip awscliv2.zip

sudo ./aws/install --update

You can now run: /usr/local/bin/aws --version

#install kubectl
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

chmod +x ./kubectl

sudo mv ./kubectl /usr/local/bin/kubectl

kubectl version --client

#install eksctl
curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp

sudo mv /tmp/eksctl /usr/local/bin

eksctl version

#configure aws cli
Run aws configure

#create eks cluster
eksctl create cluster --name demo-cluster-eks-robot-shop --region us-east-1

#export the cluster name
export cluster_name=demo-cluster-eks-robot-shop

#configure IAM OIDC provider
oidc_id=$(aws eks describe-cluster --name $cluster_name --query "cluster.identity.oidc.issuer" --output text | cut -d '/' -f 5) 

eksctl utils associate-iam-oidc-provider --cluster $cluster_name --approve

#to check the OIDC ID
aws iam list-open-id-connect-providers | grep $oidc_id | cut -d "/" -f4

#ALB SET-UP

#Download IAM policy document
curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.4/docs/install/iam_policy.json

#Create IAM Policy
aws iam create-policy \
    --policy-name AWSLoadBalancerControllerIAMPolicy \
    --policy-document file://iam_policy.json

#Create IAM Role
eksctl create iamserviceaccount \
  --cluster=demo-cluster-eks-robot-shop \
  --namespace=kube-system \
  --name=aws-load-balancer-controller \
  --role-name AmazonEKSLoadBalancerControllerRole \
  --attach-policy-arn=arn:aws:iam::730335530908:policy/AWSLoadBalancerControllerIAMPolicy \
  --approve    

#install helm
  curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
  chmod 700 get_helm.sh
  ./get_helm.sh

#Add helm repo
helm repo add eks https://aws.github.io/eks-charts

#Update the repo
helm repo update eks

#create alb using helm chart
helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=demo-cluster-eks-robot-shop --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller --set region=us-east-1 --set vpcId=vpc-004e682799373ea62

#Verify that the deployments are running.
kubectl get deployment -n kube-system aws-load-balancer-controller

#EBS CSI Plugin configuration
eksctl create iamserviceaccount \
    --name ebs-csi-controller-sa \
    --namespace kube-system \
    --cluster demo-cluster-eks-robot-shop \
    --role-name AmazonEKS_EBS_CSI_DriverRole \
    --role-only \
    --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \
    --approve

#Run the following command. Replace with the name of your cluster, with your account ID. 
eksctl create addon --name aws-ebs-csi-driver --cluster demo-cluster-eks-robot-shop --service-account-role-arn arn:aws:iam::730335530908:role/AmazonEKS_EBS_CSI_DriverRole --force  

#clone the github repo containin source code and config files for robot shop app.
sudo yum -y install git
git clone https://github.com/iam-veeramalla/three-tier-architecture-demo.git
cd three-tier-architecture-demo/EKS/helm/

#Use this helm chart to customise your install of Stan's Robot Shop.
kubectl create ns robot-shop
helm install robot-shop --namespace robot-shop .

#to check the status of pods running
kubectl get pods -n robot-shop

#expose the robot-shop-app to www on 8080 using alb
kubectl apply -f ingress.yaml

#check the ingress alb resource address
kubectl get ingress -n robot-shop

now, check through the console if the app lb is under active state. if alb is showing status active copy the alb dns and paste on browser and press enter to use the website.

#Delete the cluster
eksctl delete cluster --name demo-cluster-eks-robot-shop --region us-east-1
